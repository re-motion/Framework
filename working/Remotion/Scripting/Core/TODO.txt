*) Implement "ScriptContextNone" scheme: Special ScriptContext which is enabled by default and creates no proxy but instead just returns the proxied 
object itself. 
Postponed until need for this feature actually arises.

*) Introduce MethodInfoExtended / PropertyInfoExtended (MGi & FS). 
   A lot of reflection code would be much easier to write and maintain, if one would introduce a MethodInfoExtended class,
   which is self-contained in the sense that it holds enough context information about where it comes from 
   (e.g. if it is an explicit interface implementation etc) so one can e.g. implement a proxying method just from a
   MethodInfoExtended instance.
   This would remove the requirement to have different methods for the different cases, which all need to be called with specific
   parameters, but especially would make it much simpler to write helper functions which are 99% the same but need to differ in one call or 
   passed attribute depending on whether the method is an explicit interface implementation.
   This is even more true for PropertyInfoExtended, because properties have the additional complication of being made up of 3 objects 
   (the property itself, getter & setter) instead of just one as in the case of a method.