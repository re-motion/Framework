<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the re-motion Core Framework (www.re-motion.org)
 ! Copyright (c) rubicon IT GmbH, www.rubicon.eu
 ! 
 ! The re-motion Core Framework is free software; you can redistribute it 
 ! and/or modify it under the terms of the GNU Lesser General Public License 
 ! as published by the Free Software Foundation; either version 2.1 of the 
 ! License, or (at your option) any later version.
 ! 
 ! re-motion is distributed in the hope that it will be useful, 
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of 
 ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 ! GNU Lesser General Public License for more details.
 ! 
 ! You should have received a copy of the GNU Lesser General Public License
 ! along with re-motion; if not, see http://www.gnu.org/licenses.
-->
<SmartPage>
  <Class>
    <remarks>

      <h4 class="dtH4">Standards Conformance</h4>
      <list type="table">
        <listheader>
          <term>Standard</term>
          <description>Conformance Information</description>
        </listheader>
        <item>
          <term>HTML 4.01</term>
          <description>valid</description>
        </item>
        <item>
          <term>XHTML 1.0</term>
          <description>valid</description>
        </item>
        <item>
          <term>WAI WCAG 1.0</term>
          <description>
            Dirty state tracking, displaying the abort confirmation dialog, concurrent postback prevention, 
            and smart navigation require java-script but are not considered to be required for a usable page.
          </description>
        </item>        
      </list>

      <h4 class="dtH4">Dirty State Tracking (specified in <see cref="ISmartPage"/>)</h4>
      <para>
        The <see cref="SmartPage"/> provides methods for server-side and client-side dirty state tracking.
      </para><para>
        Invoke <see cref="RegisterControlForDirtyStateTracking"/> to register a control for tracking that
        implements the <see cref="IEditableControl"/> interface. Business Object Controls automatically 
        register when added to a page implementing <see cref="ISmartPage"/>.
      </para><para>
        Invoke <see cref="RegisterControlForClientSideDirtyStateTracking"/> if you wish to track the client-side
        dirty state of a control not supporting <see cref="IEditableControl"/>. In this case you must pass the
        control's client-side ID. You also have to keep track of the control's server-side dirty state on your own.
      </para><para>
        <see cref="GetDirtyStates"/> should be used to determine whether any of the tracked controls are dirty.
        The <see cref="SmartPage"/> also includes the value of its own <see cref="IsDirty"/> flag in the result of
        <see cref="GetDirtyStates"/>. If the page itself is dirty, the dirty state of the registered controls
        is irrelevant. <see cref="GetDirtyStates"/> can be extended to introduce additional conditions for dirty state,
        e.g. to indicate that the session contains unsaved changes.
      </para><para>
        <see cref="SmartPageExtensions.EvaluateDirtyState"/> should be used to determine whether the page has unsaved changes.
      </para>
      
      <h4 class="dtH4">Abort Confirmation Dialog (specified in <see cref="ISmartPage"/>)</h4>
      <para>
        The <see cref="SmartPage"/> provides an abort confirmation message, which can be overridden in the 
        application by setting <see cref="AbortMessage"/>.        
      </para><para>
        <see cref="IsAbortConfirmationEnabled"/> is designed to determine whether to show the abort confirmation 
        dialog in general and <see cref="HasUnconditionalAbortConfirmation"/> determines whether to limit the dialog
        to dirty pages. The <see cref="SmartPage"/> uses the <see cref="ShowAbortConfirmation"/> property to define
        the value of these flags.
      </para>
      
      <h4 class="dtH4">Concurrent Postback Prevention (specified in <see cref="ISmartPage"/>)</h4>
      <para>
        The <see cref="SmartPage"/> provides client-side script code to detect and prevent attempts to submit the
        page while the previous postback is not yet completed.
      </para><para>
        During such an event, the <see cref="SmartPage"/> displays the message defined in the 
        <see cref="StatusIsSubmittingMessage"/> property (or it's default message if the property is not set).
      </para><para>
        If a second postback is trigged during an asynchronous ASP.NET auto-postback, the postback is queued and processed 
        after the page has been refreshed. This behavior can be controlled via the <see cref="AbortQueuedSubmit"/> flag.
      </para>
      
      <h4 class="dtH4">Smart Navigation (specified in <see cref="ISmartNavigablePage"/>)</h4>
      <para>
        An implementation of <see cref="ISmartNavigablePage"/>. It also provides the 
        <see cref="EnableSmartScrolling"/> and <see cref="EnableSmartFocusing"/> properties, which allow you to 
        disable the smart navigation individually for each page. Override the <see cref="IsSmartScrollingEnabled"/> 
        and <see cref="IsSmartFocusingEnabled"/> properties to use additional criteria (besides the application 
        configuration and the properties) for disabling smart navigation. Note that the scrolled DOM elements 
        must have the ID attribute set for the scroll position to be restored.
      </para>
      
      <h4 class="dtH4">Additional Features of the <see cref="SmartPage"/></h4>
      The following contains a list of featueres not standardized by interfaces.
      <list type="bullet">
        <item>
          The <see cref="PrepareValidation"/> method, which ensures that all controls implenting 
          <see cref="IValidatableControl"/> know their validators. Call this method prior to validation if you 
          intend to validate using the 
          <see cref="M:Remotion.ObjectBinding.Web.UI.Controls.IBusinessObjectDataSourceControl.Validate">IBusinessObjectDataSourceControl.Validate</see> 
          method instead of <see cref="Page.Validate">Page.Validate</see>.
        </item>
      </list>
    
      <h4 class="dtH4">Localization Support</h4>
      <para>
        The resources required by the <see cref="SmartPage"/> are defined by the 
        <see cref="SmartPageInfo.ResourceIdentifier"/> enum. See the <b>ResourceIdentifier</b>'s documentation for 
        details on localization.
      </para><para>
        The <see cref="SmartPage"/> supports resource dispatching to its properties through the 
        <see cref="Remotion.Web.UI.Globalization.ResourceDispatcher"/>.
        Use the following resource identifiers for dispatching strings to the <see cref="SmartPage"/>
        or use the <b>global resource identifier</b> syntax for setting the resource identifier in the propery.
      </para>
      <list type="table">
        <listheader>
          <term>Property</term>
          <description>Resource Identifier</description>
        </listheader>
        <item>
          <term> <see cref="AbortMessage"/> </term>
          <description>
            <para> &lt;SmartPage Resource ID&gt;:AbortMessage </para>
            <para> e.g. auto:this:AbortMessage </para>
          </description>
        </item>
        <item>
          <term> <see cref="StatusIsSubmittingMessage"/> </term>
          <description>
            <para> &lt;SmartPage Resource ID&gt;:StatusIsSubmittingMessage </para>
            <para> e.g. auto:this:StatusIsSubmittingMessage </para>
          </description>
        </item>
      </list>
      
    </remarks>
    
    <seealso cref="ISmartPage"/>
  </Class>
  <RegisterClientSidePageEventHandler>
    <param name="pageEvent"> The type of event to register for. </param>
    <param name="key"> 
      Forms in combination with <paramref name="pageEvent"/> a unique key that identifies the function.
    </param>
    <param name="function"> The name of the Java Script function to be called. </param>
    <remarks> 
      <para>
        The Java Script function will be called without arguments and a return value will be ignored.
      </para><para>
        Any script blocks with the same <paramref name="pageEvent"/> and <paremref name="key"/> parameter values 
        are considered duplicates. 
      </para>
    </remarks>
    <exception type="InvalidOperationException">
      Thrown if the method is called after the <b>OnPreRender</b> method of the base page has been invoked.
    </exception>
  </RegisterClientSidePageEventHandler>
</SmartPage>
