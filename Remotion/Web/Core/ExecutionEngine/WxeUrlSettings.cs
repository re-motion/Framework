// This file is part of the re-motion Core Framework (www.re-motion.org)
// Copyright (c) rubicon IT GmbH, www.rubicon.eu
//
// The re-motion Core Framework is free software; you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of the
// License, or (at your option) any later version.
//
// re-motion is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with re-motion; if not, see http://www.gnu.org/licenses.
//
using System;
using Remotion.ServiceLocation;
using Remotion.Utilities;

namespace Remotion.Web.ExecutionEngine
{
  /// <summary>
  /// Defines settings for URLs generated by the execution engine.
  /// </summary>
  /// <threadsafety static="true" instance="true" />
  [ImplementationFor(typeof(WxeUrlSettings), Lifetime = LifetimeKind.Singleton)]
  public class WxeUrlSettings
  {
    private const string c_defaultUrlMappingFile = "UrlMapping.xml";

    private const int c_defaultMaximumUrlLength = 1024;

    /// <summary>
    /// Factory method to create a <see cref="WxeUrlSettings"/> object.
    /// </summary>
    /// <param name="urlMappingFile">
    ///   Specifies the <see cref="UrlMappingFile"/>. If not specified, 'UrlMapping.xml' will be set as the default value.
    /// </param>
    /// <param name="maximumUrlLength">
    ///   Specifies the <see cref="MaximumUrlLength"/>. If not specified, 1024 will be set as the default value.
    /// </param>
    /// <param name="defaultWxeHandler">
    ///   Specifies the <see cref="DefaultWxeHandler"/>. If not specified, an empty string will be set as the default value.
    /// </param>
    /// <returns>A new <see cref="WxeUrlSettings"/> object.</returns>
    public static WxeUrlSettings Create (string? urlMappingFile = null, int? maximumUrlLength = null, string? defaultWxeHandler = null)
    {
      ArgumentUtility.CheckNotEmpty("urlMappingFile", urlMappingFile);
      ArgumentUtility.CheckNotEmpty("defaultWxeHandler", defaultWxeHandler);

      var constructedUrlMappingFile = urlMappingFile;
      var constructedMaximumUrlLength = maximumUrlLength ?? c_defaultMaximumUrlLength;
      var constructedDefaultWxeHandler = defaultWxeHandler;

      return new WxeUrlSettings(constructedUrlMappingFile, constructedMaximumUrlLength, constructedDefaultWxeHandler);
    }

    /// <summary> Gets the path to the file holding the URL mapping configuration. </summary>
    /// <value> A string. Defaults to 'UrlMapping.xml'. </value>
    public string? UrlMappingFile { get; }

    /// <summary> Gets the maximum length of URLs generated by the Execution Engine. </summary>
    /// <value> An integer. Defaults to 1024. </value>
    public int MaximumUrlLength { get; }

    /// <summary> Gets the path to the default <see cref="WxeHandler"/>. </summary>
    /// <remarks> If not set, either a mapping is required or the function must be executed by a WxePage. </remarks>
    /// <value>
    ///   A virtual path, relative to the application root. Will always start with <c>~/</c>.
    ///   Defaults to an empty string if no handler is assigned.
    /// </value>
    public string? DefaultWxeHandler { get; }

    public WxeUrlSettings ()
        : this(c_defaultUrlMappingFile, c_defaultMaximumUrlLength, null)
    {
    }

    private WxeUrlSettings (string? urlMappingFile, int maximumUrlLength, string? defaultWxeHandler)
    {
      UrlMappingFile = urlMappingFile;
      MaximumUrlLength = maximumUrlLength;
      DefaultWxeHandler = CheckDefaultWxeHandler(defaultWxeHandler);
    }

    private string? CheckDefaultWxeHandler (string? defaultWxeHandler)
    {
      if (string.IsNullOrEmpty(defaultWxeHandler))
      {
        return null;
      }
      else
      {
        defaultWxeHandler = defaultWxeHandler.Trim();
        ArgumentUtility.CheckNotNullOrEmpty(nameof(defaultWxeHandler), defaultWxeHandler);

        if (defaultWxeHandler.StartsWith("/") || defaultWxeHandler.IndexOf(":") != -1)
          throw new ArgumentException($"No absolute paths are allowed. Resource: '{defaultWxeHandler}'", nameof(defaultWxeHandler));

        if (!defaultWxeHandler.StartsWith("~/"))
          defaultWxeHandler = "~/" + defaultWxeHandler;

        return defaultWxeHandler;
      }
    }
  }
}
