/* Style applied to the BocReferenceValue. */

.bocReferenceValue
{
  min-height: var(--remotion-themed-singleline-min-height);
}

.bocReferenceValue span.body
{
  display: inline-grid;
  grid-template-areas: "icon content optionsMenu";
  grid-template-columns: var(--default-icon-size) var(--remotion-themed-control-width) 1fr;
  gap: var(--remotion-themed-spacing);
  align-items: center;
}

.bocReferenceValue span.icon
{
  grid-area: icon;
}

.bocReferenceValue span.icon img
{
  position: relative;
  width: var(--default-icon-size);
  height: var(--default-icon-size);
  padding-left: calc(var(--remotion-themed-spacing) + var(--remotion-themed-border-width));
  pointer-events: none;

  /* Currently used for overriding img.Icon rule in Style.css. */
  vertical-align: top;
}

.bocReferenceValue span.content
{
  grid-row: 1;
  grid-column: icon / content;
  display: inline-flex;
}

.bocReferenceValue span.content select
{
  width: 100%;
  padding-left: var(--remotion-themed-spacing-small);
}

.bocReferenceValue span.content.hasIcon select
{
  padding-left: calc(var(--default-icon-size) + var(--remotion-themed-spacing));
}

.bocReferenceValue span.content select.error
{
  background-image: url('../Image/sprite.svg#ReferenceValueErrorIndicator');
  background-size: var(--remotion-themed-line-height) var(--remotion-themed-line-height);
  background-position: right var(--remotion-themed-img-width) center;
  background-repeat: no-repeat;
}

.bocReferenceValue span.content select option
{
  padding: var(--remotion-themed-spacing-small) auto;
}

.bocReferenceValue.disabled span.content,
.bocReferenceValue .disabled span.content
{
  color: var(--color-disabled-text);
  cursor: default;
}

.bocReferenceValue.readOnly span[tabindex]
{
  min-height: var(--remotion-themed-singleline-min-height);
  box-sizing: border-box;
  display: flex;
  align-items: center;
  padding: var(--remotion-themed-control-padding-readonly);
  border: var(--remotion-themed-border-readonly);
  border-radius: var(--remotion-themed-border-radius);
}

span.bocReferenceValue.readOnly span[tabindex]:empty
{
  /* Ensures that the keyboard focus of empty readonly values surrounds the entires width of the span. */
  width: 100%;
}

span.bocReferenceValue.readOnly span[tabindex]:empty:before
{
  /* Inserting a 'zero width space' unicode character as placeholder so that empty
  readonly values are not collapsed and can therefore visualize the keyboard focus.
  This also scales with the font size and min-height doesn't have to be set since
  line height remains unchanged. */
  content: "\200b";
}

.bocReferenceValue.readOnly span.content.hasIcon span
{
  padding-left: calc(var(--default-icon-size) + var(--remotion-themed-spacing));
}

.bocReferenceValue span.optionsMenu
{
  grid-area: optionsMenu;
}
