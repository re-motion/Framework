/* Style applied to the BocEnumValue. */

.bocEnumValue,
.bocEnumValue.readOnly
{
  display: inline-flex;
  width: var(--remotion-themed-control-width);
  min-height: var(--remotion-themed-min-height);
}

.bocEnumValue td
{
  white-space: nowrap;
  display: inline-flex;
  align-items: center;
  box-sizing: border-box;
}

.bocEnumValue td label
{
  padding: var(--remotion-themed-padding);
}

.bocEnumValue td span
{
  display: inline-flex;
  align-items: center;
  box-sizing: border-box;
}

.bocEnumValue input
{
  /* Has to be set explicitely for input. */
  margin: 0;
}

.bocEnumValue input:focus
{
  /* In order to have an outline for the radio buttons as well. */
  outline: auto;
}

.bocEnumValue input:not([disabled]):hover
{
  cursor: pointer;
}

.bocEnumValue select
{
  width: 100%;
}

.bocEnumValue option
{
  padding: calc(var(--remotion-themed-padding) * 0.75);
  border-radius: var(--remotion-themed-border-radius);
}

.bocEnumValue select:not([disabled]) option:hover
{
  background-color: var(--color-highlight);
}

.bocEnumValue.readOnly span
{
  box-sizing: border-box;
  padding: var(--remotion-themed-padding) 0;
}

.bocEnumValue.readOnly span[tabindex]:empty
{
  /* Ensures that the keyboard focus of empty readonly values surrounds the entire width of the span. */
  width: 100%;
}

.bocEnumValue.readOnly span[tabindex]:empty:before
{
  /* Inserting a 'zero width space' unicode character as placeholder so that empty 
    readonly values are not collapsed and can therefore visualize the keyboard focus. 
    This also scales with the font size and min-height doesn't have to be set since
    line height remains unchanged. */
  content: "\200b";
}
