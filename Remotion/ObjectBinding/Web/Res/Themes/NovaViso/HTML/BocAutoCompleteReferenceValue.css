/* Style applied to the BocAutoCompleteReferenceValue. */

.bocAutoCompleteReferenceValue
{
  --bocautocomplete-input-spacing-offset: calc(var(--remotion-themed-spacing) - 0.25em);
  min-height: var(--remotion-themed-singleline-min-height);
}

.bocAutoCompleteReferenceValue span.body
{
  display: inline-grid;
  grid-template-areas: "icon content optionsMenu";
  grid-template-columns: var(--default-icon-size) var(--remotion-themed-control-width) 1fr;
  gap: var(--remotion-themed-spacing);
  align-items: center;
}

.bocAutoCompleteReferenceValue span.icon
{
  grid-area: icon;
}

.bocAutoCompleteReferenceValue span.icon img
{
  position: relative;
  width: var(--default-icon-size);
  height: var(--default-icon-size);
  padding-left: calc(var(--remotion-themed-spacing) + var(--remotion-themed-border-width));
  pointer-events: none;

  /* Currently used for overriding img.Icon rule in Style.css. */
  vertical-align: top;
}

.bocAutoCompleteReferenceValue span.content
{
  grid-row: 1;
  grid-column: icon / content;
  display: inline-grid;
  grid-template-areas: "input button";
  grid-template-columns: 1fr var(--remotion-themed-img-width);
  gap: var(--remotion-themed-spacing-small);
  align-items: center;
}

.bocAutoCompleteReferenceValue span.content span.bocAutoCompleteReferenceValueInput
{
  grid-row: 1;
  grid-column: input / button;
  height: 100%;
}

.bocAutoCompleteReferenceValue span.content span.bocAutoCompleteReferenceValueInput input,
.bocAutoCompleteReferenceValue span.content.hasIcon span.bocAutoCompleteReferenceValueInput input
{
  box-sizing: border-box;
  height: 100%;
  width: 100%;
}

.bocAutoCompleteReferenceValue span.content span.bocAutoCompleteReferenceValueInput input
{
  padding-left: calc(var(--remotion-themed-spacing) + var(--remotion-themed-border-width));
  padding-right: calc(var(--remotion-themed-img-width) + var(--remotion-themed-spacing-small));
}

.bocAutoCompleteReferenceValue span.content.hasIcon span.bocAutoCompleteReferenceValueInput input
{
  padding-left: calc(var(--default-icon-size) + var(--remotion-themed-spacing) + var(--remotion-themed-border-width) + var(--bocautocomplete-input-spacing-offset));
}

.bocAutoCompleteReferenceValue input.error
{
  background-image: url('../Image/sprite.svg#AutoCompleteReferenceValueErrorIndicator');
  background-size: var(--remotion-themed-line-height) var(--remotion-themed-line-height);
  background-position: right var(--remotion-themed-img-width) center;
  background-repeat: no-repeat;
}

.bocAutoCompleteReferenceValue span.bocAutoCompleteReferenceValueButton
{
  grid-row: 1;
  grid-column: button;
  display: flex;
  align-items: center;
  width: var(--remotion-themed-img-width);
  height: calc(var(--remotion-themed-singleline-min-height));
  box-sizing: border-box;
  border: var(--remotion-themed-border);
  border-color: transparent;
  border-left-color: var(--color-contrast-separator);
  border-top-right-radius: var(--remotion-themed-border-radius);
  border-bottom-right-radius: var(--remotion-themed-border-radius);
}

.bocAutoCompleteReferenceValue:not(.disabled) span.bocAutoCompleteReferenceValueButton:hover
{
  background-color: var(--color-highlight);
  border: var(--remotion-themed-border-focus);
}

.bocAutoCompleteReferenceValue .bocAutoCompleteReferenceValueButton img
{
  width: 100%;
  height: 100%;
  background-image: url(../Image/sprite.svg#AutoCompleteReferenceValueDropDownButtonFace);
  background-size: var(--remotion-themed-img-width) var(--remotion-themed-img-width);
  background-position: center;
  background-repeat: no-repeat;
}

.bocAutoCompleteReferenceValue.disabled:not(.readOnly) span.content
{
  color: var(--color-disabled-text);
  cursor: default;
}

.bocAutoCompleteReferenceValue.readOnly span.body > span.icon
{
  align-self: start;
  padding: var(--remotion-themed-control-padding-readonly);
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
  border: var(--remotion-themed-border-readonly);
}

.bocAutoCompleteReferenceValue.readOnly span.content
{
  display: inline-flex;
  align-items: center;
  justify-content: start;
}

.bocAutoCompleteReferenceValue.readOnly span[tabindex]
{
  min-height: var(--remotion-themed-singleline-min-height);
  box-sizing: border-box;
  display: flex;
  align-items: center;
  padding: var(--remotion-themed-control-padding-readonly);
  border: var(--remotion-themed-border-readonly);
  border-radius: var(--remotion-themed-border-radius);
}

.bocAutoCompleteReferenceValue.readOnly span[tabindex]:focus-visible
{
  outline: none;
  border: var(--remotion-themed-border-readonly-focus);
  background-color: var(--remotion-themed-background-color-readonly-focus);
  box-shadow: var(--remotion-themed-box-shadow-readonly-focus);
}

span.bocAutoCompleteReferenceValue.readOnly span[tabindex]:empty
{
  /* Ensures that the keyboard focus of empty readonly values surrounds the entires width of the span. */
  width: 100%;
}

span.bocAutoCompleteReferenceValue.readOnly span[tabindex]:empty:before
{
  /* Inserting a 'zero width space' unicode character as placeholder so that empty
  readonly values are not collapsed and can therefore visualize the keyboard focus.
  This also scales with the font size and min-height doesn't have to be set since
  line height remains unchanged. */
  content: "\200b";
}

.bocAutoCompleteReferenceValue.readOnly span.content.hasIcon span
{
  padding-left: calc(var(--default-icon-size) + var(--remotion-themed-border-width) + var(--bocautocomplete-input-spacing-offset));
}

.bocAutoCompleteReferenceValue span.optionsMenu
{
  grid-area: optionsMenu;
}
