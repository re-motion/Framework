/* Style applied to the BocDateTimeValue. */

span.bocDateTimeValue,
span.bocDateValue
{
  width: 15em;
  height: 1.7em;
  position: relative;
  display: inline-block;
  vertical-align: middle;
  overflow: clip;
  white-space: nowrap;
}

span.bocDateTimeValue
{
  min-width: 14em;
}

span.bocDateValue
{
  min-width: 8em;
}

span.bocDateTimeValue.readOnly,
span.bocDateValue.readOnly
{
  height: inherit;
  /* Ensures that the outline is visible in Firefox. */
  overflow: visible;
}

span.bocDateTimeValue.disabled,
span.bocDateValue.disabled
{
}

.mozilla span.bocDateTimeValue:not(.readOnly) span.bocDateInputWrapper,
.mozilla span.bocDateValue:not(.readOnly) span.bocDateInputWrapper
{
  right: 2px;
}

span.bocDateTimeValue:not(.readOnly) span.bocDateInputWrapper,
span.bocDateValue:not(.readOnly) span.bocDateInputWrapper
{
  position: absolute;
  left: 0;
  min-width: 4em;
  width: auto;
}

span.bocDateTimeValue:not(.readOnly) span.bocTimeInputWrapper
{
  position: absolute;
  right: 0;
}

span.bocDateTimeValue:not(.readOnly) span.bocDate24HoursWithSeconds,
span.bocDateTimeValue:not(.readOnly) span.bocDate12HoursWithSeconds
{
  right: 9.0em;
}

.mozilla span.bocDateTimeValue:not(.readOnly) span.bocDate24HoursWithSeconds,
.mozilla span.bocDateTimeValue:not(.readOnly) span.bocDate12HoursWithSeconds
{
  right: calc(9.0em + 2px);
}

span.bocDateTimeValue:not(.readOnly) span.bocDate24Hours,
span.bocDateTimeValue:not(.readOnly) span.bocDate12Hours
{
  right: 7.4em;
}

.mozilla span.bocDateTimeValue:not(.readOnly) span.bocDate24Hours,
.mozilla span.bocDateTimeValue:not(.readOnly) span.bocDate12Hours
{
  right: calc(7.4em + 4px);
}

span.bocDateValue:not(.readOnly) span.bocDate24Hours,
span.bocDateValue:not(.readOnly) span.bocDate12Hours
{
  right: 2.2em;
}

.mozilla span.bocDateValue:not(.readOnly) span.bocDate24Hours,
.mozilla span.bocDateValue:not(.readOnly) span.bocDate12Hours
{
  right: calc(2.2em + 2px);
}

span.bocDateInputWrapper input
{
  width: 100%;
}

span.bocTime24HoursWithSeconds input,
span.bocTime12HoursWithSeconds input
{
  width: 6em;
}

span.bocTime24Hours input,
span.bocTime12Hours input
{
  width: 4.5em;
}

span.bocDateTimeValue.readOnly input:read-only + span,
span.bocDateValue.readOnly input:read-only + span
{
  /* Ensures that diacritic marks can be rendered without being cut off. 
     Using line-height instead of padding works better with BocDateTimeValue. When using padding, the text is not aligned with the label. */
  line-height: 1.5em;
  /* Ensures that the outline is rendered outside of the space reserved for diacritic marks. */
  display: inline-block;
}

span.bocDateTimeValue.readOnly input:read-only + span:first-child,
span.bocDateValue.readOnly input:read-only + span:first-child
{
  /* Ensures that diacritic marks can be rendered without being cut off. */
  /*padding-top: 0.2em;*/
}

span.bocDateTimeValue.readOnly input:read-only + span:last-child,
span.bocDateValue.readOnly input:read-only + span:last-child
{
  /* Ensures that diacritic marks can be rendered without being cut off. */
  /*padding-bottom: 0.2em;*/
}

span.bocDateTimeValue.readOnly input:read-only + span:empty,
span.bocDateValue.readOnly input:read-only + span:empty
{
  /* Ensures that empty readonly values are not collapsed and can therefor visualize the keyboard focus */
  min-height: 1.5em;
  vertical-align: -0.2em;
}

span.bocDateTimeValue.readOnly input:read-only + span:empty
{
  /* Ensures that empty readonly values are not collapsed and can therefor visualize the keyboard focus */
  width: calc(50% - 2px);
}

span.bocDateValue.readOnly input:read-only + span:empty
{
  /* Ensures that empty readonly values are not collapsed and can therefor visualize the keyboard focus */
  width: 100%;
}

span.bocDateTimeValue.readOnly input:read-only:focus + span,
span.bocDateValue.readOnly input:read-only:focus + span
{
  outline: dotted black 1px;
  outline: solid Highlight 2px;
  outline: auto 5px -webkit-focus-ring-color;
}

a.bocPicker24HoursWithSeconds,
a.bocPicker12HoursWithSeconds,
a.bocPicker24Hours,
a.bocPicker12Hours
{
  position: absolute;
  top: 0.2em;
}

span.bocDateTimeValue a.bocPicker24HoursWithSeconds,
span.bocDateTimeValue a.bocPicker12HoursWithSeconds
{
  right: 6.7em;
}

.mozilla span.bocDateTimeValue a.bocPicker24HoursWithSeconds,
.mozilla span.bocDateTimeValue a.bocPicker12HoursWithSeconds
{
  right: calc(6.7em + 2px);
}

span.bocDateTimeValue a.bocPicker24Hours,
span.bocDateTimeValue a.bocPicker12Hours
{
  right: 5.2em;
}

.mozilla span.bocDateTimeValue a.bocPicker24Hours,
.mozilla span.bocDateTimeValue a.bocPicker12Hours
{
  right: calc(5.2em + 2px);
}

span.bocDateValue a.bocPicker24Hours,
span.bocDateValue a.bocPicker12Hours
{
  right: 0;
}

span.bocDateTimeValue a img,
span.bocDateValue a img
{
  border: 0;
  text-decoration: none;
  height: 20px;
  width: 20px;
  margin-bottom: -5px;
}

span.bocDateTimeValue.disabled a,
span.bocDateValue.disabled a
{
  cursor: default;
}

span.bocDateTimeValue.disabled a img,
span.bocDateValue.disabled a img
{
  opacity: 0.4;
  filter: progid:DXImageTransform.Microsoft.BasicImage(opacity=0.40), 
          progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);
}

span.bocDateInputWrapper input,
span.bocTimeInputWrapper input
{
  height: 1.2em;
  line-height: 1em;
}

.blink span.bocDateInputWrapper input,
.blink span.bocTimeInputWrapper input
{
  padding-left: 1px;
  padding-right: 1px;
}