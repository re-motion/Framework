// This file is part of the MixinXRef project
// Copyright (c) rubicon IT GmbH, www.rubicon.eu
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
using System;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;
using MixinXRef.Formatting;
using MixinXRef.Reflection;
using MixinXRef.Reflection.Utility;
using MixinXRef.Report;
using MixinXRef.UnitTests.Helpers;
using MixinXRef.UnitTests.TestDomain;
using MixinXRef.Utility;
using NUnit.Framework;
using Remotion.Mixins;
using System.Xml.XPath;

namespace MixinXRef.UnitTests.Report
{
  [TestFixture]
  public class MemberReportGeneratorTest
  {
    private IOutputFormatter _outputFormatter;

    [SetUp]
    public void SetUp ()
    {
      _outputFormatter = new OutputFormatter ();
    }

    [Test]
    public void GenerateXml_InterfaceWithZeroMembers ()
    {
      var reportGenerator = CreateMemberReportGenerator (typeof (IUseless), null);
      var output = reportGenerator.GenerateXml ();

      var expectedOutput = new XElement ("Members");

      Assert.That (output.ToString (), Is.EqualTo (expectedOutput.ToString ()));
    }

    [Test]
    public void GenerateXml_InterfaceWithMembers ()
    {
      var reportGenerator = CreateMemberReportGenerator (typeof (IDisposable), null);
      var output = reportGenerator.GenerateXml ();

      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("id", "0"),
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "Dispose"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public abstract"),
              _outputFormatter.CreateMethodMarkup ("Dispose", typeof (void), new ParameterInfo[0])
              )
          );

      XElementComparisonHelper.Compare (output, expectedOutput);
    }

    [Test]
    public void GenerateXml_ObjectWithoutOwnMembers ()
    {
      var reportGenerator = CreateMemberReportGenerator (typeof (UselessObject), new InvolvedType (typeof (UselessObject)));

      var output = reportGenerator.GenerateXml ();

      // enhancement: surpress output of default constructor if generated by compiler
      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("id", "0"),
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public"),
              _outputFormatter.CreateConstructorMarkup ("UselessObject", new ParameterInfo[0])
              )
          );

      XElementComparisonHelper.Compare (output, expectedOutput);
    }

    [Test]
    public void GenerateXml_PropertyWithGetAndSet_Overridden ()
    {
      var reportGenerator = CreateMemberReportGenerator (typeof (ClassWithProperty), new InvolvedType (typeof (ClassWithProperty)));
      var property = typeof (ClassWithProperty).GetProperty("PropertyName");
      var output = reportGenerator.GenerateXml ();

      var expectedOutput = new XElement(
        "Members",
        new XElement(
          "Member",
          new XAttribute("id", "0"),
          new XAttribute("type", MemberTypes.Constructor),
          new XAttribute("name", ".ctor"),
          new XAttribute("is-declared-by-this-class", true),
          _outputFormatter.CreateModifierMarkup("", "public"),
          _outputFormatter.CreateConstructorMarkup("ClassWithProperty", new ParameterInfo[0])
          ),
        new XElement(
          "Member",
          new XAttribute("id", "1"),
          new XAttribute("type", MemberTypes.Method),
          new XAttribute("name", "DoSomething"),
          new XAttribute("is-declared-by-this-class", true),
          _outputFormatter.CreateModifierMarkup("", "public override"),
          _outputFormatter.CreateMethodMarkup("DoSomething", typeof (void), new ParameterInfo[0])
          ),
        new XElement(
          "Member",
          new XAttribute("id", "2"),
          new XAttribute("type", MemberTypes.Property),
          new XAttribute("name", "PropertyName"),
          new XAttribute("is-declared-by-this-class", true),
          _outputFormatter.CreateModifierMarkup("", "public override"),
          _outputFormatter.CreatePropertyMarkup("PropertyName", typeof (string)),
          new XElement(
            "SubMember",
            new XAttribute("id", "3"),
            new XAttribute("type", MemberTypes.Method),
            new XAttribute("name", "get_PropertyName"),
            _outputFormatter.CreateModifierMarkup("", "public override"),
            _outputFormatter.CreateMethodMarkup("get_PropertyName", typeof (string), new ParameterInfo[0])
            ),
          new XElement(
            "SubMember",
            new XAttribute("id", "4"),
            new XAttribute("type", MemberTypes.Method),
            new XAttribute("name", "set_PropertyName"),
            _outputFormatter.CreateModifierMarkup("", "public override"),
            _outputFormatter.CreateMethodMarkup("set_PropertyName", typeof (void), property.GetSetMethod().GetParameters())
            )
          )
        );

      XElementComparisonHelper.Compare (output, expectedOutput);
    }

    [Test]
    public void GenerateXml_TargetClassWithOverriddenBaseClassMember ()
    {
      var type = typeof (InheritatedTargetClass);
      var mixinConfiguration =
          MixinConfiguration.BuildNew ().ForClass<InheritatedTargetClass> ().AddMixin<MixinOverridesTargetClassMember> ().BuildConfiguration ();
      var targetClassDefinition = new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (type, mixinConfiguration));

      var involvedType = new InvolvedType (type) { TargetClassDefinition = targetClassDefinition };

      var reportGenerator = CreateMemberReportGenerator (type, involvedType);
      var output = reportGenerator.GenerateXml ();

      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("id", "0"),
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public"),
              _outputFormatter.CreateConstructorMarkup ("InheritatedTargetClass", new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("id", "1"),
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "MyBaseClassMethod"),
              new XAttribute ("is-declared-by-this-class", false),
              _outputFormatter.CreateModifierMarkup ("", "public virtual"),
              _outputFormatter.CreateMethodMarkup ("MyBaseClassMethod", typeof (void), new ParameterInfo[0]),
              GenerateOverrides ("Mixin-Reference", "0", "MixinOverridesTargetClassMember")
              ),
          new XElement (
              "Member",
              new XAttribute ("id", "2"),
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "MyNewMethod"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public virtual"),
              _outputFormatter.CreateMethodMarkup ("MyNewMethod", typeof (void), new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("id", "3"),
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "MyNonRelevantBaseClassMethod"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public override"),
              _outputFormatter.CreateMethodMarkup ("MyNonRelevantBaseClassMethod", typeof (void), new ParameterInfo[0]),
              GenerateOverrides ("Mixin-Reference", "0", "MixinOverridesTargetClassMember")
              )
          );

      XElementComparisonHelper.Compare (output, expectedOutput);
    }

    [Test]
    public void GenerateXml_MixinWithOverriddenClassMember ()
    {
      var mixinType = typeof (MixinWithInheritedMethod);
      var targetType = typeof (ClassOverridingInheritedMixinMethod);
      var mixin = new InvolvedType (mixinType);
      var target = new InvolvedType (targetType);

      var mixinConfiguration =
          MixinConfiguration.BuildNew ().ForClass<ClassOverridingInheritedMixinMethod> ().AddMixin<MixinWithInheritedMethod> ().BuildConfiguration ();
      var targetClassDefinition = TargetClassDefinitionUtility.GetConfiguration (targetType, mixinConfiguration);
      mixin.TargetTypes.Add (target, new ReflectedObject (targetClassDefinition.GetMixinByConfiguredType (mixinType)));

      var reportGenerator = CreateMemberReportGenerator (mixinType, mixin);
      var output = reportGenerator.GenerateXml ();

      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("id", "0"),
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public"),
              _outputFormatter.CreateConstructorMarkup ("MixinWithInheritedMethod", new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("id", "1"),
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "ProtectedInheritedMethod"),
              new XAttribute ("is-declared-by-this-class", false),
              _outputFormatter.CreateModifierMarkup ("", "protected virtual"),
              _outputFormatter.CreateMethodMarkup ("ProtectedInheritedMethod", typeof (string), new ParameterInfo[0]),
              GenerateOverrides ("Target-Reference", "0", "ClassOverridingInheritedMixinMethod")
              )
          );

      XElementComparisonHelper.Compare (output, expectedOutput);
    }

    private XElement GenerateOverrides (string referenceTagName, string referenceID, string instanceName)
    {
      return new XElement ("Overrides",
                          new XElement (referenceTagName, new XAttribute ("ref", referenceID),
                                       new XAttribute ("instance-name", instanceName)));
    }

    private object GenerateOverriddenMember (string referenceID, string memberName, string memberSignature)
    {
      return new XElement ("OverriddenMembers",
                          new XElement ("Member-Reference", new XAttribute ("ref", referenceID),
                                       new XAttribute ("type", "OverrideMixin"),
                                       new XAttribute ("member-name", memberName),
                                       new XAttribute ("member-signature", memberSignature)));
    }

    [Test]
    public void GenerateXml ()
    {
      var type = typeof (MemberOverrideTestClass.Target);
      var mixinConfiguration =
          MixinConfiguration.BuildNew ().ForClass<MemberOverrideTestClass.Target> ().AddMixin<MemberOverrideTestClass.Mixin1> ().BuildConfiguration ();
      var targetClassDefinition = new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (type, mixinConfiguration));
      var involvedType = new InvolvedType (type);
      involvedType.TargetClassDefinition = targetClassDefinition;

      var memberIdentifierGenerator = new IdentifierGenerator<MemberInfo> ();

      var reportGenerator = new MemberReportGenerator (type, involvedType, new IdentifierGenerator<Type> (), memberIdentifierGenerator, _outputFormatter);

      var output = reportGenerator.GenerateXml ();
      var expectedOutput = new XElement (
          "Members",
          new XElement (
              "Member",
              new XAttribute ("id", "0"),
              new XAttribute ("type", MemberTypes.Constructor),
              new XAttribute ("name", ".ctor"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public"),
              _outputFormatter.CreateConstructorMarkup ("Target", new ParameterInfo[0])
              ),
          new XElement (
              "Member",
              new XAttribute ("id", "1"),
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "OverriddenMethod"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("", "public virtual"),
              _outputFormatter.CreateMethodMarkup ("OverriddenMethod", typeof (void), new ParameterInfo[0]),
              GenerateOverrides ("Mixin-Reference", "0", "MemberOverrideTestClass+Mixin1")
              ),
          new XElement (
              "Member",
              new XAttribute ("id", "3"),
              new XAttribute ("type", MemberTypes.Method),
              new XAttribute ("name", "TemplateMethod"),
              new XAttribute ("is-declared-by-this-class", true),
              _outputFormatter.CreateModifierMarkup ("OverrideMixin ", "public"),
              _outputFormatter.CreateMethodMarkup ("TemplateMethod", typeof (void), new ParameterInfo[0]),
              GenerateOverriddenMember ("2", "TemplateMethod", "Void TemplateMethod()")
              )
          );

      XElementComparisonHelper.Compare (output, expectedOutput);
    }

    [Test]
    public void HasOverrideMixinAttribute_False ()
    {
      var reportGenerator = CreateMemberReportGenerator (typeof (object), new InvolvedType (typeof (object)));
      var output = reportGenerator.GenerateXml ().XPathSelectElement ("Member[@name='ToString']").Element ("Modifiers").Element ("Type");

      Assert.That (output, Is.Null);
    }

    [Test]
    public void HasOverrideMixinAttribute_True ()
    {
      var type = typeof (MemberOverrideTestClass.Target);
      var mixinConfiguration =
          MixinConfiguration.BuildNew ().ForClass<MemberOverrideTestClass.Target> ().AddMixin<MemberOverrideTestClass.Mixin1> ().BuildConfiguration ();
      var targetClassDefinition = new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (type, mixinConfiguration));
      var involvedType = new InvolvedType (type) { TargetClassDefinition = targetClassDefinition };

      var reportGenerator = CreateMemberReportGenerator (type, involvedType);

      var output = reportGenerator.GenerateXml ().XPathSelectElement ("Member[@name='TemplateMethod']").Element ("Modifiers").Element ("Type");

      Assert.That (output.Value, Is.EqualTo ("OverrideMixin"));
    }

    [Test]
    public void HasOverrideTargetAttribute_False ()
    {
      var reportGenerator = CreateMemberReportGenerator (typeof (object), new InvolvedType (typeof (object)));
      var output = reportGenerator.GenerateXml ().XPathSelectElement ("Member[@name='ToString']").Element ("Modifiers").Element ("Type");

      Assert.That (output, Is.Null);
    }

    [Test]
    public void HasOverrideTargetAttribute_True ()
    {
      var mixinType = typeof (MemberOverrideTestClass.Mixin1);
      var targetType = new InvolvedType (typeof (MemberOverrideTestClass.Target));
      var mixinConfiguration =
          MixinConfiguration.BuildNew ()
              .ForClass<MemberOverrideTestClass.Target> ().AddMixin<MemberOverrideTestClass.Mixin1> ()
              .BuildConfiguration ();
      var involvedType = new InvolvedType (mixinType);
      involvedType.TargetTypes.Add (
          targetType, new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (targetType.Type, mixinConfiguration).Mixins[mixinType]));
      var reportGenerator = CreateMemberReportGenerator (mixinType, involvedType);

      var output = reportGenerator.GenerateXml ().XPathSelectElement ("Member[@name='OverriddenMethod']").Element ("Modifiers").Element ("Type");

      Assert.That (output.Value, Is.EqualTo ("OverrideTarget"));
    }

    [Test]
    public void name ()
    {
      var x = new XElement ("a");
      var y = new XElement ("a");

      Assert.That (x.Value, Is.EqualTo (y.Value));
    }

    [Test]
    public void GetOverrides_NoOverrides ()
    {
      var targetType = typeof (TargetClass1);
      var mixinConfiguration =
          MixinConfiguration.BuildNew ()
              .ForClass<TargetClass1> ().AddMixin<Mixin1> ()
              .BuildConfiguration ();
      var targetClassDefinition = new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (targetType, mixinConfiguration));
      var involvedType = new InvolvedType (targetType)
                         {
                           TargetClassDefinition = targetClassDefinition,
                           ClassContext = new ReflectedObject (mixinConfiguration.ClassContexts.First ())
                         };

      var reportGenerator = CreateMemberReportGenerator (targetType, involvedType);

      //var memberInfo = targetType.GetMember ("Dispose")[0];
      var output = reportGenerator.GenerateXml ();

      Assert.That (output.XPathSelectElements ("Member[@name='Dispose']/Overrides").Any (), Is.False);
    }

    [Test]
    public void GetOverrides_WithOverrides ()
    {
      var targetType = typeof (MemberOverrideTestClass.Target);
      var mixinConfiguration =
          MixinConfiguration.BuildNew ()
              .ForClass<MemberOverrideTestClass.Target> ().AddMixin<MemberOverrideTestClass.Mixin1> ()
              .BuildConfiguration ();
      var targetClassDefinition = new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (targetType, mixinConfiguration));
      var involvedType = new InvolvedType (targetType)
                         {
                           TargetClassDefinition = targetClassDefinition,
                           ClassContext = new ReflectedObject (mixinConfiguration.ClassContexts.First ())
                         };

      var reportGenerator = CreateMemberReportGenerator (targetType, involvedType);

      //var memberInfo = targetType.GetMember ("OverriddenMethod")[0];
      //var output = reportGenerator.GetOverrides (memberInfo);

      var output = reportGenerator.GenerateXml ();

      var expectedOutput =
          new XElement (
              "Overrides",
              new XElement (
                  "Mixin-Reference",
                  new XAttribute ("ref", 0),
                  new XAttribute ("instance-name", "MemberOverrideTestClass+Mixin1")
                  ));

      Assert.That (output.XPathSelectElement ("Member[@name='OverriddenMethod']").Element ("Overrides").ToString (), Is.EqualTo (expectedOutput.ToString ()));
    }

    [Test]
    public void GetOverrides_WithOverrides_ForMemberInBaseClass ()
    {
      var targetType = typeof (BaseMemberOverrideTestClass.Target);
      var mixinConfiguration =
          MixinConfiguration.BuildNew ()
              .ForClass<BaseMemberOverrideTestClass.Target> ().AddMixin<BaseMemberOverrideTestClass.Mixin1> ()
              .BuildConfiguration ();
      var targetClassDefinition = new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (targetType, mixinConfiguration));
      var involvedType = new InvolvedType (targetType)
      {
        TargetClassDefinition = targetClassDefinition,
        ClassContext = new ReflectedObject (mixinConfiguration.ClassContexts.First ())
      };

      var reportGenerator = CreateMemberReportGenerator (targetType, involvedType);

      //var memberInfo = targetType.GetMember ("OverriddenMethod")[0];
      var output = reportGenerator.GenerateXml ();
      var expectedOutput =
          new XElement (
              "Overrides",
              new XElement (
                  "Mixin-Reference",
                  new XAttribute ("ref", 0),
                  new XAttribute ("instance-name", "BaseMemberOverrideTestClass+Mixin1")
                  ));

      Assert.That (output.XPathSelectElement ("Member[@name='OverriddenMethod']").Element ("Overrides").ToString (), Is.EqualTo (expectedOutput.ToString ()));
    }

    [Test]
    public void GetOverrides_WithoutOverrides_ForMemberHiddenByDerivedClass ()
    {
      var targetType = typeof (HiddenMemberTestClass.Target);
      var mixinConfiguration =
          MixinConfiguration.BuildNew ()
              .ForClass<HiddenMemberTestClass.Target> ().AddMixin<HiddenMemberTestClass.Mixin1> ()
              .BuildConfiguration ();
      var targetClassDefinition = new ReflectedObject (TargetClassDefinitionUtility.GetConfiguration (targetType, mixinConfiguration));
      var involvedType = new InvolvedType (targetType)
      {
        TargetClassDefinition = targetClassDefinition,
        ClassContext = new ReflectedObject (mixinConfiguration.ClassContexts.First ())
      };

      var reportGenerator = CreateMemberReportGenerator (targetType, involvedType);
      var output = reportGenerator.GenerateXml ();

      Assert.That (output.XPathSelectElements ("Member[@name='HiddenMethod']/Overrides").Any (), Is.False);
    }

    private MemberReportGenerator CreateMemberReportGenerator (Type mixinType, InvolvedType involvedType)
    {
      return new MemberReportGenerator (mixinType, involvedType, new IdentifierGenerator<Type> (), new IdentifierGenerator<MemberInfo> (), _outputFormatter);
    }
  }
}