<Project>

  <Import Project="$(MSBuildThisFileDirectory)Library.props" />

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0</TargetFrameworks>
    <IsPackable>False</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="tsconfig\debug\tsconfig.json" Condition="'$(Configuration)' == 'Debug'" />
    <Content Include="tsconfig\release\tsconfig.json" Condition="'$(Configuration)' == 'Release'" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="microsoft-ajax.TypeScript.DefinitelyTyped">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.TypeScript.MSBuild">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup>
    <MSBuildPath>C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild</MSBuildPath>
    <MSBuildPath Condition="!Exists('$(MSBuildPath)')">C:\Program Files\Microsoft Visual Studio\2022\BuildTools\MSBuild</MSBuildPath>
    <MSBuildPath Condition="!Exists('$(MSBuildPath)')">C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild</MSBuildPath>
    <MSBuildPath Condition="!Exists('$(MSBuildPath)')">C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild</MSBuildPath>
    <MSBuildPath Condition="!Exists('$(MSBuildPath)')">C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild</MSBuildPath>
    <MSBuildPath Condition="!Exists('$(MSBuildPath)')"></MSBuildPath>
    <!-- dotnet does not contain a distribution of node.js -->
    <NodePath Condition="'$(NodePath)' == '' AND '$(MSBuildPath)' != '' AND '$(OS)' == 'Windows_NT' AND Exists('$(MSBuildPath)\Microsoft\VisualStudio\NodeJs\node.exe')">$(MSBuildPath)\Microsoft\VisualStudio\NodeJs</NodePath>
  </PropertyGroup>

  <!--
       The TypeScript build infrastructure will delete generated output from other configurations.
       This is bad for us because we build Debug and Release before packing. As such, we need to
       remove any existing TypeScript build info files to prevent the cleanup.
   -->
  <Target Name="PreventDeletionOfTypeScriptFilesFromOtherConfigurations" BeforeTargets="TypeScriptDeleteOutputFromOtherConfigs">
    <ItemGroup>
      <_typeScriptBuildFilesToDelete Remove="@(_typeScriptBuildFilesToDelete)"/>
      <_typeScriptBuildFilesToDelete Include="$(BaseIntermediateOutputPath)\**\Tsc*.out"/>
    </ItemGroup>
    <Delete Files="@(_typeScriptBuildFilesToDelete)"/>
  </Target>

</Project>